# -*- coding: utf-8 -*-
"""AluraStoreBr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XhnJJj-jjfTzAjFxk7qb6dqZn4R5bE5F

### Importação dos dados
"""

import pandas as pd

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_1.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_4.csv"

loja = pd.read_csv(url)
loja2 = pd.read_csv(url2)
loja3 = pd.read_csv(url3)
loja4 = pd.read_csv(url4)

loja.head()

"""#1. Análise do faturamento

"""

def faturamento(lista):
    faturamento = 0
    for linha in lista:
        try:
            faturamento += float(linha[2])
        except (ValueError, IndexError):
            continue
    return faturamento

dados =  loja.values.tolist()
dados2 = loja2.values.tolist()
dados3 = loja3.values.tolist()
dados4 = loja4.values.tolist()

faturamentos = {
    "Loja 1": faturamento(dados),
    "Loja 2": faturamento(dados2),
    "Loja 3": faturamento(dados3),
    "Loja 4": faturamento(dados4),
}

loja_menor = min(faturamentos, key=faturamentos.get)
loja_maior = max(faturamentos , key=faturamentos.get)


print(f"A loja que menos vendeu foi {loja_menor} com R$ {faturamentos[loja_menor]:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
print(f"A loja que mais vendeu foi {loja_maior} com R$ {faturamentos[loja_maior]:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

"""# 2. Vendas por Categoria

"""

def vendas_por_categoria(lista):
    try:
        categorias = {}
        for linha in lista:
            try:
                categoria = linha[1]
                valor = float(linha[2])
                if categoria in categorias:
                    categorias[categoria] += valor
                else:
                    categorias[categoria] = valor
            except (IndexError, ValueError):
                continue
        return categorias
    except Exception as e:
        print(f"Erro ao processar a lista: {e}")
        return {}

categorias_por_loja = {
  "Loja 1": vendas_por_categoria(dados),
  "Loja 2": vendas_por_categoria(dados2),
  "Loja 3": vendas_por_categoria(dados3),
  "Loja 4": vendas_por_categoria(dados4),
}
valor_categorias_loja = {
  "Loja 1": vendas_por_categoria(dados),
  "Loja 2": vendas_por_categoria(dados2),
  "Loja 3": vendas_por_categoria(dados3),
  "Loja 4": vendas_por_categoria(dados4),

}


categorias_gerais = set()
for loja in categorias_por_loja:
    categorias_gerais.update(categorias_por_loja[loja])


categorias_gerais = sorted(list(categorias_gerais))


for categoria in categorias_gerais:
    total_categoria = 0
    for loja in valor_categorias_loja:
        if categoria in valor_categorias_loja[loja]:
            total_categoria += valor_categorias_loja[loja][categoria]
    print(f"{categoria}: R$ {total_categoria:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

"""# 3. Média de Avaliação das Lojas"""

def avaliacao (lista) :
  nota = 0

  for linha in lista:
    try:
      nota += int(linha[7])
    except (ValueError, IndexError):
        continue

  nota_total = nota / len(lista)
  return nota_total

media_por_loja = {
  "Loja 1": avaliacao(dados),
  "Loja 2": avaliacao(dados2),
  "Loja 3": avaliacao(dados3),
  "Loja 4": avaliacao(dados4),

}
loja_menorAV = min(media_por_loja, key=media_por_loja.get)
loja_maiorAV = max(media_por_loja, key=media_por_loja.get)

print(f"A loja que tem a menor media é a  {loja_menorAV} com  {media_por_loja[loja_menorAV]:,.2f}")
print(f"A loja que tem a melhor media é a {loja_maiorAV} com  {media_por_loja[loja_maiorAV]:,.2f}")

"""# 4. Produtos Mais e Menos Vendidos"""

def produtos_vendidos(lista):
    try:
        categorias = {}
        for linha in lista:
            try:
                categoria = linha[0]
                valor = float(linha[2])
                if categoria in categorias:
                    categorias[categoria] += valor
                else:
                    categorias[categoria] = valor
            except (IndexError, ValueError):
                continue
        return categorias
    except Exception as e:
        print(f"Erro ao processar a lista: {e}")
        return {}

produtos_nome = {
  "Loja 1": produtos_vendidos(dados),
  "Loja 2": produtos_vendidos(dados2),
  "Loja 3": produtos_vendidos(dados3),
  "Loja 4": produtos_vendidos(dados4),
}

produtos_gerais = {}


for loja, produtos in produtos_nome.items():
    for produto, valor in produtos.items():
        if produto in produtos_gerais:
            produtos_gerais[produto] += valor
        else:
            produtos_gerais[produto] = valor

produtos_ordenados = sorted(produtos_gerais.items(), key=lambda x: x[1], reverse=True)

for produto, total in produtos_ordenados:
    print(f"\n{produto}: R$ {total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

prod_low = min(produtos_gerais, key=produtos_gerais.get)
prod_max = max(produtos_gerais, key=produtos_gerais.get)



print(f"\nProduto Mais vendido : Valor: {prod_max} - R$ {produtos_gerais[prod_max]:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
print(f"\nProduto Menos vendido : Valor: {prod_low} - R$ {produtos_gerais[prod_low]:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

"""# 5. Frete Médio por Loja

"""

def media (lista) :
  valor_frete = 0

  for linha in lista:
    try:
      valor_frete += float(linha[3])
    except (ValueError, IndexError):
        continue

  frete_total = valor_frete / len(lista)
  return frete_total

media_frete = {
  "Loja 1": media(dados),
  "Loja 2": media(dados2),
  "Loja 3": media(dados3),
  "Loja 4": media(dados4),
}
loja_menorFR = min(media_frete, key=media_frete.get)
loja_maiorFR = max(media_frete, key=media_frete.get)

print(f' A loja que tem a Maior media de frete é a {loja_maiorFR} com {media_frete[loja_maiorFR]:,.2f}')
print(f' A loja que tem a Menor media de frete é a {loja_menorFR} com {media_frete[loja_menorFR]:,.2f}')